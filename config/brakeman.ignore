{
  "ignored_warnings": [
    {
      "warning_type": "Redirect",
      "warning_code": 18,
      "fingerprint": "01e22ed63f381bb4b86dccec3d36ccea3421257bfa1bbfaa67410f416a9a5456",
      "check_name": "Redirect",
      "message": "Possible unprotected redirect",
      "file": "app/controllers/candidate_interface/after_sign_in_controller.rb",
      "line": 28,
      "link": "https://brakemanscanner.org/docs/warning_types/redirect/",
      "code": "redirect_to(params[:path])",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "CandidateInterface::AfterSignInController",
        "method": "redirect_to_path_if_path_params_are_present"
      },
      "user_input": "params[:path]",
      "confidence": "High",
      "note": ""
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "1cee5ab174657cbdebb3e1ac4432c226aef489c6961a8c1512d187d1ff62ed08",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/components/provider_interface/provider_partner_permission_breakdown_component.rb",
      "line": 43,
      "link": "https://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "provider.ratifying_provider_permissions.providers_have_open_course.where(\"ratifying_provider_can_#{permission}\" => permission_applies)",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "ProviderInterface::ProviderPartnerPermissionBreakdownComponent",
        "method": "training_provider_partner_ids_where"
      },
      "user_input": "permission",
      "confidence": "Weak",
      "note": ""
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "37b3066632afad7b480ce45f1b9d1263a923f29bba5edd3afd3e2f78e2cd425e",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/models/magic_link_feature_metrics.rb",
      "line": 16,
      "link": "https://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ApplicationForm.apply_1.select(\"count(DISTINCT audits.id) as audit_count\", \"count(DISTINCT authentication_tokens.id) as token_count\").joins(:application_choices).joins(\"LEFT OUTER JOIN audits ON audits.auditable_id = application_forms.candidate_id AND audits.auditable_type = 'Candidate' AND audits.action = 'update' AND audits.audited_changes#>>'{magic_link_token, 1}' IS NOT NULL AND audits.created_at <= application_choices.#{timestamp}\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "MagicLinkFeatureMetrics",
        "method": "average_magic_link_requests_upto"
      },
      "user_input": "timestamp",
      "confidence": "Medium",
      "note": ""
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "38104ade37d5c61659409d037de157949b23a917a7f5b504534ac0a46fa5cf8f",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/services/notifications_list.rb",
      "line": 17,
      "link": "https://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "application_choice.provider.provider_users.or(application_choice.accredited_provider.provider_users).joins(:notification_preferences).where(\"#{{ :application_received => ([:application_submitted, :chase_provider_decision]), :application_withdrawn => ([:application_withdrawn]), :application_rejected_by_default => ([:application_rejected_by_default]), :offer_accepted => ([:offer_accepted, :unconditional_offer_accepted]), :offer_declined => ([:declined, :declined_by_default]) }.select do\n k if event.in?(v)\n end.keys.first} IS true\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "NotificationsList",
        "method": "s(:self).for"
      },
      "user_input": "{ :application_received => ([:application_submitted, :chase_provider_decision]), :application_withdrawn => ([:application_withdrawn]), :application_rejected_by_default => ([:application_rejected_by_default]), :offer_accepted => ([:offer_accepted, :unconditional_offer_accepted]), :offer_declined => ([:declined, :declined_by_default]) }.select do\n k if event.in?(v)\n end.keys.first",
      "confidence": "Weak",
      "note": "not a user input"
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "428e5a80ad2d4c0fdda6da0225a5a676f25a0e95c0e655344c02a4670ad0e460",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/services/provider_interface/sort_application_choices.rb",
      "line": 13,
      "link": "https://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "application_choices.from(\"        (\\n          SELECT a.*,\\n            CASE\\n              WHEN #{deferred_offers_pending_reconfirmation} THEN 1\\n              WHEN #{about_to_be_rejected_automatically} THEN 2\\n              WHEN #{give_feedback_for_rbd} THEN 3\\n              WHEN #{awaiting_provider_decision_non_urgent} THEN 4\\n              WHEN #{interviewing_non_urgent} THEN 5\\n              WHEN #{pending_conditions_previous_cycle} THEN 6\\n              WHEN #{waiting_on_candidate} THEN 7\\n              WHEN #{pending_conditions_current_cycle} THEN 8\\n              WHEN #{successful_candidates} THEN 9\\n              WHEN #{deferred_offers_current_cycle} THEN 10\\n              ELSE 999\\n            END AS task_view_group,\\n            #{pg_days_left_to_respond} AS pg_days_left_to_respond\\n\\n            FROM application_choices a\\n        ) AS application_choices\\n\".squish)",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "ProviderInterface::SortApplicationChoices",
        "method": "s(:self).for_task_view"
      },
      "user_input": "deferred_offers_pending_reconfirmation",
      "confidence": "Weak",
      "note": ""
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "471859383ef3e9fba03933907e1bb043a8a57520241d275846126e6a2425f2e1",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/models/apply_again_feature_metrics.rb",
      "line": 95,
      "link": "https://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ApplicationForm.where(:phase => \"apply_2\", :recruitment_cycle_year => RecruitmentCycle.current_year).joins(:application_choices).joins(\"inner join (select auditable_id, max(created_at) as status_last_updated_at\\n          from audits\\n          where auditable_type = 'ApplicationChoice'\\n            and action = 'update'\\n            and audited_changes#>>'{status, 1}' is not null\\n          group by auditable_id\\n        ) as status_audits on status_audits.auditable_id = application_choices.id\\n          and status_last_updated_at between '#{start_time}' and '#{end_time}'\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "ApplyAgainFeatureMetrics",
        "method": "application_forms"
      },
      "user_input": "start_time",
      "confidence": "Medium",
      "note": ""
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "8b9afd450cdaed47a32fe72f50753a5a92d16a04993c636d8eac438f9f4079a1",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/services/notifications_list.rb",
      "line": 14,
      "link": "https://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "application_choice.provider.provider_users.joins(:notification_preferences).where(\"#{{ :application_received => ([:application_submitted, :chase_provider_decision]), :application_withdrawn => ([:application_withdrawn]), :application_rejected_by_default => ([:application_rejected_by_default]), :offer_accepted => ([:offer_accepted, :unconditional_offer_accepted]), :offer_declined => ([:declined, :declined_by_default]) }.select do\n k if event.in?(v)\n end.keys.first} IS true\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "NotificationsList",
        "method": "s(:self).for"
      },
      "user_input": "{ :application_received => ([:application_submitted, :chase_provider_decision]), :application_withdrawn => ([:application_withdrawn]), :application_rejected_by_default => ([:application_rejected_by_default]), :offer_accepted => ([:offer_accepted, :unconditional_offer_accepted]), :offer_declined => ([:declined, :declined_by_default]) }.select do\n k if event.in?(v)\n end.keys.first",
      "confidence": "Weak",
      "note": "not a user input"
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "8d47ca53c31589141f357f2ee543042879b2512c30b261840f89cec9f6da0518",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/queries/get_activity_log_events.rb",
      "line": 43,
      "link": "https://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "Audited::Audit.includes(:user => ([:provider_user, :support_user]), :auditable => ([:application_form, :course_option, :course, :site, :provider, :accredited_provider, :current_course_option])).joins(\"INNER JOIN (#{application_choices.to_sql}) ac\\n  ON (\\n    auditable_type = 'ApplicationChoice'\\n    AND auditable_id = ac.id\\n    AND action = 'update'\\n    AND ( #{application_choice_audits_filter_sql} )\\n  ) OR (\\n    associated_type = 'ApplicationChoice'\\n    AND associated_id = ac.id\\n    AND NOT auditable_type = 'OfferCondition'\\n  )\\n\".squish)",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "GetActivityLogEvents",
        "method": "s(:self).call"
      },
      "user_input": "application_choice_audits_filter_sql",
      "confidence": "Weak",
      "note": ""
    },
    {
      "warning_type": "Unscoped Find",
      "warning_code": 82,
      "fingerprint": "9e900042a97ec79a46b47b5c58b9adfa1391693e495a89dbf455607b3b2603d8",
      "check_name": "UnscopedFind",
      "message": "Unscoped call to `ProviderRelationshipPermissions#find`",
      "file": "app/controllers/provider_interface/organisation_permissions_controller.rb",
      "line": 67,
      "link": "https://brakemanscanner.org/docs/warning_types/unscoped_find/",
      "code": "ProviderRelationshipPermissions.find(params[:id])",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "ProviderInterface::OrganisationPermissionsController",
        "method": "set_up_relationship_objects"
      },
      "user_input": "params[:id]",
      "confidence": "Weak",
      "note": ""
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "b55ce37e4d245f02f20918d612a3abfcbff43d41f0a114e8a31907157e65121a",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/components/provider_interface/provider_partner_permission_breakdown_component.rb",
      "line": 50,
      "link": "https://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "provider.training_provider_permissions.providers_have_open_course.where(\"training_provider_can_#{permission}\" => permission_applies)",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "ProviderInterface::ProviderPartnerPermissionBreakdownComponent",
        "method": "ratifying_provider_partner_ids_where"
      },
      "user_input": "permission",
      "confidence": "Weak",
      "note": ""
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "dee8e3d32c167d6090d7a67d1bc9add167f8ef7b154fcc1d1311fc7aad779a84",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/models/apply_again_feature_metrics.rb",
      "line": 121,
      "link": "https://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ApplicationForm.apply_1.joins(:application_choices).where(\"NOT EXISTS (:pending_or_successful)\", :pending_or_successful => ApplicationChoice.select(1).where(:status => (ApplicationStateChange.valid_states - [:withdrawn, :cancelled, :rejected, :declined, :conditions_not_met, :offer_withdrawn, :application_not_sent])).where(\"application_choices.application_form_id = application_forms.id\")).joins(\"inner join (select auditable_id, max(created_at) as status_last_updated_at\\n          from audits\\n          where auditable_type = 'ApplicationChoice'\\n            and action = 'update'\\n            and audited_changes#>>'{status, 1}' is not null\\n          group by auditable_id\\n        ) as status_audits on status_audits.auditable_id = application_choices.id\\n          and status_last_updated_at between '#{start_time}' and '#{end_time}'\")",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "ApplyAgainFeatureMetrics",
        "method": "applications_eligible_for_apply_again"
      },
      "user_input": "start_time",
      "confidence": "Medium",
      "note": ""
    },
    {
      "warning_type": "SQL Injection",
      "warning_code": 0,
      "fingerprint": "e37e9ca6cdce7fd12ca704a0ef90d573aa09c5f3678680e1f2ef7a402f8a94ea",
      "check_name": "SQL",
      "message": "Possible SQL injection",
      "file": "app/services/data_migrations/delete_all_site_audits.rb",
      "line": 27,
      "link": "https://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code": "ActiveRecord::Base.connection.execute(\"DELETE FROM audits\\nWHERE id IN (#{audits_sql})\\n\".squish)",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "DataMigrations::DeleteAllSiteAudits",
        "method": "delete_site_audits!"
      },
      "user_input": "audits_sql",
      "confidence": "Medium",
      "note": ""
    }
  ],
  "updated": "2021-09-02 10:50:35 +0100",
  "brakeman_version": "5.1.1"
}
