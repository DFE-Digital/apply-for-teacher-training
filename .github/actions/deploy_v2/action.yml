name: deploy_v2
description: Deploys application to AKS

inputs:
  azure-client-id:
    description: Azure service principal or managed identity client ID when using OIDC
    required: true
  azure-subscription-id:
    description: Azure service principal or managed identity subscription ID when using OIDC
    required: true
  azure-tenant-id:
    description: Azure service principal or managed identity tenant ID when using OIDC
    required: true
  environment:
    description: Environment to deploy to
    required: true
  pr-number:
    description: PR number for the review app
    required: false
  sha:
    description: Commit sha to be deployed
    required: true
  slack-webhook:
    required: true

outputs:
  deploy-url:
    value: ${{ steps.set_env_var.outputs.deploy_url }}

runs:
  using: composite
  steps:
    - name: Set Environment variables
      id: set_env_var
      shell: bash
      run: |
        tf_vars_file=terraform/aks/workspace_variables/${{ inputs.environment }}.tfvars.json
        terraform_version=$(awk '/{/{f=/^terraform/;next}f' terraform/aks/provider.tf | grep -o [0-9\.]*)
        cluster=$(jq -r '.cluster' ${tf_vars_file})

        if [ -n "${{ inputs.pr-number }}" ]; then
          echo "DEPLOY_ENV=review-${{ inputs.pr-number }}" >> $GITHUB_ENV
          echo "deploy_url=https://apply-review-${{ inputs.pr-number }}.${cluster}.teacherservices.cloud" >> $GITHUB_OUTPUT
        else
          echo "DEPLOY_ENV=${{ inputs.environment }}" >> $GITHUB_ENV

          hostname=$(jq -r '.gov_uk_host_names[0]' ${tf_vars_file})
          if [[ $hostname != null ]]; then
            echo "deploy_url=https://${hostname}" >> $GITHUB_OUTPUT
          else
            # Investigate changing this so the public endpoint is used rather than a system endpoint
            if [[ $cluster == 'production' ]]; then
              echo "deploy_url=https://apply-${{ inputs.environment }}.teacherservices.cloud" >> $GITHUB_OUTPUT
            else
              echo "deploy_url=https://apply-${{ inputs.environment }}.${cluster}.teacherservices.cloud" >> $GITHUB_OUTPUT
            fi
          fi
        fi;
        echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_ENV

        echo "TERRAFORM_VERSION=$terraform_version" >> $GITHUB_ENV
        echo "KEY_VAULT_NAME=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
        echo "KEY_VAULT_APP_SECRET_NAME=$(jq -r '.key_vault_app_secret_name' ${tf_vars_file})" >> $GITHUB_ENV
        echo "KEY_VAULT_INFRA_SECRET_NAME=$(jq -r '.key_vault_infra_secret_name' ${tf_vars_file})" >> $GITHUB_ENV
      env:
        DOCKER_IMAGE: ${{ format('ghcr.io/dfe-digital/apply-teacher-training:{0}', inputs.sha) }}

    - name: Use Terraform ${{ env.TERRAFORM_VERSION }}
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - uses: azure/login@v2
      with:
        client-id: ${{ inputs.azure-client-id }}
        tenant-id: ${{ inputs.azure-tenant-id }}
        subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Validate Azure Key Vault secrets
      uses: DFE-Digital/github-actions/validate-key-vault-secrets@master
      with:
        KEY_VAULT: ${{ env.KEY_VAULT_NAME }}
        SECRETS: |
          ${{ env.KEY_VAULT_APP_SECRET_NAME }}
          ${{ env.KEY_VAULT_INFRA_SECRET_NAME }}

    - uses: DFE-Digital/github-actions/set-kubelogin-environment@master
      with:
        azure-client-id: ${{ inputs.azure-client-id }}
        azure-tenant-id: ${{ inputs.azure-tenant-id }}
        azure-subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Terraform init, plan & apply
      shell: bash
      run: make ci ${{ inputs.environment }} deploy
      env:
        IMAGE_TAG: ${{ inputs.sha }}
        PR_NUMBER: ${{ inputs.pr-number }}

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true

    - uses: DFE-Digital/keyvault-yaml-secret@v1
      id: get_smoke_test_secrets
      with:
        keyvault: ${{ env.KEY_VAULT_NAME }}
        secret: APPLY-CYPRESS-SECRETS
        key: CANDIDATE_TEST_EMAIL

    - name: Run smoke tests
      shell: bash
      run: bin/smoke
      env:
        CANDIDATE_TEST_EMAIL: ${{ steps.get_smoke_test_secrets.outputs.CANDIDATE_TEST_EMAIL }}
        RAILS_ENV: test
        SMOKE_TEST_APP_HOST: ${{ steps.set_env_var.outputs.deploy_url }}

    - name: Seed Review App
      shell: bash
      if: inputs.pr-number != ''
      run: |
        make ci review get-cluster-credentials PR_NUMBER=${{ inputs.pr-number }}
        kubectl exec -n bat-qa deployment/apply-review-${{ inputs.pr-number }} -- sh -c "export DISABLE_DATABASE_ENVIRONMENT_CHECK=1 && cd /app && /usr/local/bin/rake setup_review_app_data"

    - name: Notify Slack channel on job failure
      if: failure() && inputs.pr-number == ''
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_USERNAME: CI Deployment
        SLACK_TITLE: Deployment to ${{ env.DEPLOY_ENV }} failed
        SLACK_MESSAGE: |
          Deployment of docker image ${{ env.DOCKER_IMAGE }} to ${{ env.DEPLOY_ENV }} environment failed
        SLACK_WEBHOOK: ${{ inputs.slack-webhook }}
        SLACK_COLOR: failure
        SLACK_FOOTER: Sent from deploy job in deploy workflow
