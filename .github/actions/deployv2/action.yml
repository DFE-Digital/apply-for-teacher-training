name: deployv2
description: deploys application

inputs:
  arm-access-key:
    required: true
  azure-credentials:
    required: true
  environment:
    description: Environment to deploy to
    required: true
  pr-number:
    description: PR number for the review app
    required: false
  sha:
    description: Commit sha to be deployed
    required: true
  slack-webhook:
    required: true

outputs:
  deploy-url:
    value: ${{ steps.set_env_var.outputs.deploy_url }}

runs:
  using: composite
  steps:
    - name: Set Environment variables
      id: set_env_var
      shell: bash
      run: |
        tf_vars_file=terraform/workspace_variables/${{ inputs.environment }}.tfvars.json
        cluster=$(jq -r '.cluster' ${tf_vars_file})

        if [ -n "${{ inputs.pr-number }}" ]; then
          echo "DEPLOY_ENV=review-${{ inputs.pr-number }}" >> $GITHUB_ENV
          echo "deploy_url=https://apply-review-${{ inputs.pr-number }}.${cluster}.development.teacherservices.cloud" >> $GITHUB_OUTPUT
        else
          echo "DEPLOY_ENV=${{ inputs.environment }}" >> $GITHUB_ENV

          hostname=$(jq -r '.service_gov_uk_host_names[0]' ${tf_vars_file})
          if [[ $hostname != null ]]; then
            echo "deploy_url=https://${hostname}.apply-for-teacher-training.service.gov.uk" >> $GITHUB_OUTPUT
          else
            echo "deploy_url=https://apply-${{ inputs.environment }}.london.cloudapps.digital" >> $GITHUB_OUTPUT
          fi
        fi;
        echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_ENV

        echo "KEY_VAULT_NAME=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
        echo "KEY_VAULT_APP_SECRET_NAME=$(jq -r '.key_vault_app_secret_name' ${tf_vars_file})" >> $GITHUB_ENV
        echo "KEY_VAULT_INFRA_SECRET_NAME=$(jq -r '.key_vault_infra_secret_name' ${tf_vars_file})" >> $GITHUB_ENV
        echo "PAAS_CF_SPACE=$(jq -r '.paas_cf_space' ${tf_vars_file})" >> $GITHUB_ENV
      env:
        DOCKER_IMAGE: ${{ format('ghcr.io/dfe-digital/apply-teacher-training:{0}', inputs.sha) }}

    - name: Use Terraform v1.2.3
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.2.3

    - uses: azure/login@v1
      with:
        creds: ${{ inputs.azure-credentials }}

    - name: Validate Azure Key Vault secrets
      uses: DFE-Digital/github-actions/validate-key-vault-secrets@master
      with:
        KEY_VAULT: ${{ env.KEY_VAULT_NAME }}
        SECRETS: |
          ${{ env.KEY_VAULT_APP_SECRET_NAME }}
          ${{ env.KEY_VAULT_INFRA_SECRET_NAME }}

    # - name: Delete clock to force its recreation
    #   shell: bash
    #   run: |
    #     make ${{ inputs.environment }} ci delete-clock
    #   env:
    #     PR_NUMBER: ${{ inputs.pr-number }}
    #     CONFIRM_PRODUCTION: true

    - name: Terraform init, plan & apply
      shell: bash
      run: make ${{ inputs.environment }} ci deploy
      env:
        ARM_ACCESS_KEY:           ${{ inputs.arm-access-key }}
        IMAGE_TAG:                ${{ inputs.sha }}
        PR_NUMBER:                ${{ inputs.pr-number }}
        TF_VAR_azure_credentials: ${{ inputs.azure-credentials }}
        CONFIRM_PRODUCTION: true

    # - name: Set up Ruby
    #   uses: ruby/setup-ruby@v1
    #   with:
    #     bundler-cache: true

    # - uses: DFE-Digital/keyvault-yaml-secret@v1
    #   id: get_smoke_test_secrets
    #   with:
    #     keyvault: ${{ env.KEY_VAULT_NAME }}
    #     secret: APPLY-CYPRESS-SECRETS
    #     key: CANDIDATE_TEST_EMAIL

    # - name: Run smoke tests
    #   shell: bash
    #   run: bin/smoke
    #   env:
    #     CANDIDATE_TEST_EMAIL: ${{ steps.get_smoke_test_secrets.outputs.CANDIDATE_TEST_EMAIL }}
    #     RAILS_ENV: test
    #     SMOKE_TEST_APP_HOST: ${{ steps.set_env_var.outputs.deploy_url }}

    # - name: Seed Review App
    #   shell: bash
    #   if: inputs.pr-number != ''
    #   run: |
    #     cf ssh apply-review-${{ inputs.pr-number }} -c "export DISABLE_DATABASE_ENVIRONMENT_CHECK=1 && cd /app && /usr/local/bin/rake setup_review_app_data"

    # - name: Notify Slack channel on job failure
    #   if: failure() && inputs.pr-number == ''
    #   uses: rtCamp/action-slack-notify@v2
    #   env:
    #     SLACK_USERNAME: CI Deployment
    #     SLACK_TITLE: Deployment to ${{ env.DEPLOY_ENV }} failed
    #     SLACK_MESSAGE: |
    #       Deployment of docker image ${{ env.DOCKER_IMAGE }} to ${{ env.DEPLOY_ENV }} environment failed
    #     SLACK_WEBHOOK: ${{ inputs.slack-webhook }}
    #     SLACK_COLOR: failure
    #     SLACK_FOOTER: Sent from deploy job in deploy workflow
