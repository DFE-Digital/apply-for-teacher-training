name: Restore Snapshot Database
#Restores Snapshot Database apply-postgres-snapshot instance from nightly backup

on:
  workflow_dispatch:
    inputs:
      date-to-restore-from:
        description: The date of the backup to use in the restore in yyyy-MM-dd format
        required: true
      environment:
        description: GitHub environment to run the restore in
        type: choice
        default: qa
        options:
          - qa
          - production

jobs:
  backup:
    name: Restore Snapshot Database (${{ github.event.inputs.environment }})
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set KV environment variables
        run: |
          tf_vars_file=terraform/workspace_variables/${{ github.event.inputs.environment }}.tfvars.json
          echo "key_vault_name=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
          echo "key_vault_infra_secret_name=$(jq -r '.key_vault_infra_secret_name' ${tf_vars_file})" >> $GITHUB_ENV
          echo "paas_space_name=$(jq -r '.paas_cf_space' ${tf_vars_file})" >> $GITHUB_ENV

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DFE-Digital/keyvault-yaml-secret@v1
        id: get-secrets
        with:
          keyvault: ${{ env.key_vault_name }}
          secret: ${{ env.key_vault_infra_secret_name }}
          key: CF_USER,CF_PASSWORD

      - name: Setup cf cli
        uses: DFE-Digital/github-actions/setup-cf-cli@master
        with:
          CF_USERNAME:   ${{ steps.get-secrets.outputs.CF_USER }}
          CF_PASSWORD:   ${{ steps.get-secrets.outputs.CF_PASSWORD }}
          CF_SPACE_NAME: ${{ env.paas_space_name }}
          INSTALL_CONDUIT: true

      - name: Setup postgres client
        uses: DFE-Digital/github-actions/install-postgres-client@master

      - name: Validate date-to-restore-from input
        run: if [[ ${{ github.event.inputs.date-to-restore-from }} =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then echo "BACKUP_DATE=${BASH_REMATCH[0]}" >> $GITHUB_ENV; else exit 1; fi

      - name: Set Azure prefix and backup container name
        run: |
          if [[ ${{ github.event.inputs.environment }} == 'production' ]]; then BACKUP_AZURE_PREFIX=prod; \
            else BACKUP_AZURE_PREFIX=${{ github.event.inputs.environment }}; fi;
          echo "BACKUP_AZURE_PREFIX=${BACKUP_AZURE_PREFIX}" >> $GITHUB_ENV;
          echo "BACKUP_CONTAINER=${BACKUP_AZURE_PREFIX}-db-backup" >> $GITHUB_ENV;

      - name: Set Connection String
        run: |
          STORAGE_CONN_STR="$(az keyvault secret show --name APPLY-BACKUP-STORAGE-CONNECTION-STRING --vault-name ${{ env.key_vault_name }} | jq -r .value)"
          echo "::add-mask::$STORAGE_CONN_STR"
          echo "STORAGE_CONN_STR=$STORAGE_CONN_STR" >> $GITHUB_ENV

      - name: Get backup file name
        run: |
          az storage blob list --container ${BACKUP_CONTAINER} \
          --connection-string '${{ env.STORAGE_CONN_STR }}' \
          --query "[? contains(name, 'apply_${BACKUP_AZURE_PREFIX}_${BACKUP_DATE}') && ends_with(name,'sql.gz')].name" | echo "BACKUP_ARCHIVE_NAME=$(jq -r .[0])" >> $GITHUB_ENV

      - name: Download backup
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az storage azcopy blob download --container ${BACKUP_CONTAINER} --source ${BACKUP_ARCHIVE_NAME} --destination ${BACKUP_ARCHIVE_NAME} \
          --connection-string '${{ env.STORAGE_CONN_STR }}'

      - name: Restore backup to snapshot database
        run: gzip -d --to-stdout ${BACKUP_ARCHIVE_NAME} | cf conduit apply-postgres-snapshot -- psql
