name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: ghcr.io/dfe-digital/apply-teacher-training
      GEMS_NODE_MODULES_IMAGE: ghcr.io/dfe-digital/apply-teacher-training-gems-node-modules
    outputs:
      IMAGE_TAG: ${{ env.IMAGE_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set docker image tag (push)
        if: github.event_name == 'push'
        run: |
          GIT_BRANCH=${GITHUB_REF##*/}
          echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV # GIT_BRANCH will be main for refs/heads/main
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Set docker image tag (pull_request)
        if: github.event_name == 'pull_request'
        run: |
          GIT_BRANCH=${GITHUB_HEAD_REF##*/}
          echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_CONTAINER_REGISTRY_TOKEN }}

      - name: Build gems-node-modules Docker Image
        uses: docker/build-push-action@v2
        with:
          target: gems-node-modules
          tags: |
            ${{ env.GEMS_NODE_MODULES_IMAGE }}:${{ env.IMAGE_TAG }}
            ${{ env.GEMS_NODE_MODULES_IMAGE }}:${{ env.BRANCH_TAG }}
          push: true
          cache-to: type=inline
          cache-from: |
            type=registry,ref=${{ env.GEMS_NODE_MODULES_IMAGE }}:${{ env.BRANCH_TAG }}
            type=registry,ref=${{ env.GEMS_NODE_MODULES_IMAGE }}:main

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_IMAGE }}:${{ env.BRANCH_TAG }}
          push: true
          cache-to: type=inline
          cache-from: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:main
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.BRANCH_TAG }}
            type=registry,ref=${{ env.GEMS_NODE_MODULES_IMAGE }}:${{ env.BRANCH_TAG }}
            type=register,ref=${{ env.GEMS_NODE_MODULES_IMAGE }}:main
          build-args: |
            VERSION=${{ env.IMAGE_TAG }}

  lint:
    name: Lint
    needs: [build]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: /app
    strategy:
      fail-fast: false
      matrix:
        tests: [rubocop, erblint, brakeman, yarn_lint]
        include:
          - tests: rubocop
            command: bundle exec rubocop --format clang --parallel
          - tests: erblint
            command: bundle exec rake erblint
          - tests: brakeman
            command: bundle exec rake brakeman
          - tests: yarn_lint
            command: |
              yarn install
              yarn run lint && yarn run stylelint app/frontend/styles && \
              yarn run test
    container:
      image: ghcr.io/dfe-digital/apply-teacher-training-gems-node-modules:${{ needs.build.outputs.IMAGE_TAG }}
      options: -a STDOUT -a STDERR -t
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GH_CONTAINER_REGISTRY_TOKEN }}
    steps:
      - name: ${{ matrix.tests }}
        run: ${{ env.COMMAND }}
        env:
          COMMAND: ${{ matrix.command }}
  test:
    name: Tests
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tests: [ unit_shared, unit_candidate-provider, unit_support-referee-api, integration_shared, integration_provider, integration_candidate ]
        feature-flags: [on, off]
        include:
          - tests: unit_shared
            include-pattern: spec/.*/*_spec.rb
            exclude-pattern: spec/.*(candidate_interface|provider_interface|support_interface|referee_interface|system|.*api.*).*/*_spec.rb
          - tests: unit_candidate-provider
            include-pattern: spec/.*(candidate_interface|provider_interface).*/*_spec.rb
            exclude-pattern: spec/system/.*/*_spec.rb
          - tests: unit_support-referee-api
            include-pattern: spec/.*(support_interface|referee_interface|.*api.*).*/*_spec.rb
            exclude-pattern: spec/system/.*/*_spec.rb
          - tests: integration_shared
            include-pattern: spec/system/.*/*_spec.rb
            exclude-pattern: spec/system/.*(provider_interface|candidate_interface).*/*_spec.rb
          - tests: integration_provider
            include-pattern: spec/system/provider_interface/.*/*_spec.rb
          - tests: integration_candidate
            include-pattern: spec/system/candidate_interface/.*/*_spec.rb
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:11.10
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    defaults:
      run:
        working-directory: /app
    container:
      image: ghcr.io/dfe-digital/apply-teacher-training:${{ needs.build.outputs.IMAGE_TAG }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GH_CONTAINER_REGISTRY_TOKEN }}
      env:
        RAILS_ENV: test
        DB_HOSTNAME: postgres
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        REDIS_URL: redis://redis:6379/0
        DB_PORT: 5432
    steps:
      - name: Setup Parallel Database
        run: bundle exec rake parallel:setup

      - name: Install chromedriver
        run: apk add chromium chromium-chromedriver

      - name: ${{ matrix.tests }} tests with feature flags ${{ matrix.feature-flags }}
        run: bundle exec --verbose parallel_rspec --pattern "${{ env.INCLUDE_PATTERN }}" --exclude-pattern "${{ env.EXCLUDE_PATTERN }}"
        env:
          INCLUDE_PATTERN: ${{ matrix.include-pattern }}
          EXCLUDE_PATTERN: ${{ matrix.exclude-pattern || ' ' }}
          DEFAULT_FEATURE_FLAG_STATE: ${{ matrix.feature-flags }}

  trigger-deployment:
    name: Trigger Deployment
    needs: [build, test]
    runs-on: ubuntu-latest
    if: ${{ success() && github.ref == 'refs/heads/main' }}
    steps:
      - name: Trigger Deployment to QA and Staging
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          workflow: Deploy
          token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          inputs: '{"qa": "true", "staging": "true", "research": "true", "sha": "${{ needs.build.outputs.IMAGE_TAG }}"}'
