# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, reopened, synchronize, labeled]

permissions:
  packages: write
  contents: write
  pull-requests: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: ghcr.io/dfe-digital/apply-teacher-training
      GEMS_NODE_MODULES_IMAGE: ghcr.io/dfe-digital/apply-teacher-training-gems-node-modules
    outputs:
      IMAGE_TAG: ${{ env.IMAGE_TAG }}
      GIT_BRANCH: ${{ env.GIT_BRANCH }}

    # When a pull_request event occurs, we want to prevent the build from running each time a label is added, unless it is the deploy label.
    if: github.event_name != 'pull_request' ||  github.event_name == 'pull_request' && ( github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'synchronize' || github.event.label.name == 'deploy' )

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Environment variables
        run: |
          tf_vars_file=terraform/workspace_variables/review.tfvars.json
          echo "KEY_VAULT_NAME=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
          echo "KEY_VAULT_INFRA_SECRET_NAME=$(jq -r '.key_vault_infra_secret_name' ${tf_vars_file})" >> $GITHUB_ENV

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_BUILD_WF }}

      - name: Validate Azure Key Vault secrets
        uses: DFE-Digital/github-actions/validate-key-vault-secrets@master
        with:
          KEY_VAULT: ${{ env.KEY_VAULT_NAME }}
          SECRETS: |
            ${{ env.KEY_VAULT_INFRA_SECRET_NAME }}

      - uses: DFE-Digital/keyvault-yaml-secret@v1
        id: get-secret
        with:
          keyvault: ${{ env.KEY_VAULT_NAME }}
          secret: ${{ env.KEY_VAULT_INFRA_SECRET_NAME }}
          key: SNYK_TOKEN

      - name: Set docker image tag (push)
        if: github.event_name == 'push'
        run: |
          GIT_REF=${{ github.ref }}
          echo "GIT_BRANCH=${GIT_REF##*/}" >> $GITHUB_ENV # GIT_BRANCH will be main for refs/heads/main
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Set docker image tag (pull_request)
        if: github.event_name == 'pull_request'
        run: |
          # This is the actual PR branch
          GIT_REF=${{ github.head_ref }}
          echo "GIT_BRANCH=${GIT_REF##*/}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build gems-node-modules Docker Image
        uses: docker/build-push-action@v2
        with:
          target: gems-node-modules
          tags: |
            ${{ env.GEMS_NODE_MODULES_IMAGE }}:${{ env.IMAGE_TAG }}
            ${{ env.GEMS_NODE_MODULES_IMAGE }}:${{ env.GIT_BRANCH }}
          push: true
          cache-to: type=inline
          cache-from: |
            type=registry,ref=${{ env.GEMS_NODE_MODULES_IMAGE }}:${{ env.GIT_BRANCH }}
            type=registry,ref=${{ env.GEMS_NODE_MODULES_IMAGE }}:main

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_IMAGE }}:${{ env.GIT_BRANCH }}
          push: true
          cache-to: type=inline
          cache-from: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:main
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.GIT_BRANCH }}
            type=registry,ref=${{ env.GEMS_NODE_MODULES_IMAGE }}:${{ env.GIT_BRANCH }}
            type=registry,ref=${{ env.GEMS_NODE_MODULES_IMAGE }}:main
          build-args: |
            SHA=${{ env.IMAGE_TAG }}

      - name: Trigger Review App Deployment
        if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Deploy
          ref:    ${{ github.head_ref }}
          token:  ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          inputs: '{"review": "${{ github.event.pull_request.number }}", "sha": "${{ env.IMAGE_TAG }}"}'

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ steps.get-secret.outputs.snyk_token }}
        with:
          image: ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
          args: --file=Dockerfile

      - name: Notify Slack channel on job failure
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_USERNAME: CI Deployment
          SLACK_TITLE: Build failure
          SLACK_MESSAGE: Build failure on branch ${{env.GIT_BRANCH}}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: failure
          SLACK_FOOTER: Sent from build job in build workflow

  lint:
    name: Lint
    needs: [build]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: /app
    strategy:
      fail-fast: false
      matrix:
        tests: [rubocop, erblint, brakeman, yarn_lint]
        include:
          - tests: rubocop
            command: bundle exec rubocop --format clang --parallel
          - tests: erblint
            command: bundle exec rake erblint
          - tests: brakeman
            command: bundle exec rake brakeman
          - tests: yarn_lint
            command: |
              yarn install
              yarn run lint && yarn run stylelint app/frontend/styles && \
              yarn run test
    container:
      image: ghcr.io/dfe-digital/apply-teacher-training-gems-node-modules:${{ needs.build.outputs.IMAGE_TAG }}
      options: -a STDOUT -a STDERR -t
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: ${{ matrix.tests }}
        run: ${{ env.COMMAND }}
        env:
          COMMAND: ${{ matrix.command }}
      - name: Notify Slack channel on job failure
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_USERNAME: CI Deployment
          SLACK_TITLE: Lint failure
          SLACK_MESSAGE: ${{ matrix.tests }} lint failure on branch ${{ needs.build.outputs.GIT_BRANCH }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: failure
          SLACK_FOOTER: Sent from lint job in build workflow

  test:
    name: Tests
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tests: [ unit_shared, unit_candidate-provider, unit_support-referee-api, integration_shared, integration_provider, integration_candidate ]
        feature-flags: [on, off]
        include:
          - tests: unit_shared
            include-pattern: spec/.*/*_spec.rb
            exclude-pattern: spec/.*(candidate_interface|provider_interface|support_interface|referee_interface|system|.*api.*).*/*_spec.rb
          - tests: unit_candidate-provider
            include-pattern: spec/.*(candidate_interface|provider_interface).*/*_spec.rb
            exclude-pattern: spec/system/.*/*_spec.rb
          - tests: unit_support-referee-api
            include-pattern: spec/.*(support_interface|referee_interface|.*api.*).*/*_spec.rb
            exclude-pattern: spec/system/.*/*_spec.rb
          - tests: integration_shared
            include-pattern: spec/system/.*/*_spec.rb
            exclude-pattern: spec/system/.*(provider_interface|candidate_interface).*/*_spec.rb
          - tests: integration_provider
            include-pattern: spec/system/provider_interface/.*/*_spec.rb
          - tests: integration_candidate
            include-pattern: spec/system/candidate_interface/.*/*_spec.rb
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:11.10
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    defaults:
      run:
        working-directory: /app
    container:
      image: ghcr.io/dfe-digital/apply-teacher-training:${{ needs.build.outputs.IMAGE_TAG }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
      env:
        RAILS_ENV: test
        DB_HOSTNAME: postgres
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        REDIS_URL: redis://redis:6379/0
        DB_PORT: 5432
    outputs:
        flakey_tests: ${{ steps.set_flakey_test_results_var.outputs.flakey_tests }}
    steps:
      - name: Setup Parallel Database
        run: bundle exec rake parallel:setup

      - name: Install chromedriver
        run: apk add chromium chromium-chromedriver

      - name: ${{ matrix.tests }} tests with feature flags ${{ matrix.feature-flags }}
        run: bundle exec --verbose parallel_rspec --pattern "${{ env.INCLUDE_PATTERN }}" --exclude-pattern "${{ env.EXCLUDE_PATTERN }}"
        env:
          INCLUDE_PATTERN: ${{ matrix.include-pattern }}
          EXCLUDE_PATTERN: ${{ matrix.exclude-pattern || ' ' }}
          TEST_MATRIX_NODE_NAME: ${{ matrix.tests }}
          DEFAULT_FEATURE_FLAG_STATE: ${{ matrix.feature-flags }}
      - name: Read flakey test results
        id: set_flakey_test_results_var
        run: |
          file_text=$(cat /app/tmp/rspec-retry-flakey-specs.log)
          if [ ! -z "$file_text" ]
          then
            file_text="${file_text//$'\n'/%0A}"
            file_text="${file_text//\"/\'}"
            echo "::set-output name=flakey_tests::$file_text"
          else
            echo "No flakey tests logged"
          fi
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.tests }}-coverage
          path: /app/coverage/.resultset.json
          retention-days: 1

      - name: Notify Slack channel on job failure
        if: failure() && github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_USERNAME: CI Deployment
          SLACK_TITLE: Test failure
          SLACK_MESSAGE: ${{ matrix.tests }} (feature-flags ${{ matrix.feature-flags }}) test failure on branch ${{ needs.build.outputs.GIT_BRANCH }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: failure
          SLACK_FOOTER: Sent from test job in build workflow

  report-flakey-specs:
    name: Report on flakey specs in pull request
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - name: Echo flakey test output
        run: echo "${{ needs.test.outputs.flakey_tests }}"

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Comment on flakey specs in pull request
        uses: actions/github-script@0.5.0
        if: github.event_name == 'pull_request' && needs.test.outputs.flakey_tests
        env:
          FLAKEY_TEST_DATA: |
            ${{ needs.test.outputs.flakey_tests }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('/home/runner/work/apply-for-teacher-training/apply-for-teacher-training/.github/scripts/comment_on_flakey_specs.js')
            script({github, context})

  collate-and-compare-coverage:
    name: Collate test coverage reports
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Ruby (installs .ruby-version, runs bundle install)
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v2

      - name: Symlink source checkout directory to /app
        run: sudo ln -s /home/runner/work/apply-for-teacher-training/apply-for-teacher-training /app

      - name: Collate PR coverage results
        run: bundle exec ruby .github/scripts/simplecov_collate.rb

      - name: Upload collated main branch coverage report
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v2
        with:
          name: base-coverage
          path: coverage/.last_run.json
          retention-days: 5

      - name: Download main branch coverage artifact
        id: download-base-coverage
        uses: dawidd6/action-download-artifact@v2
        if: github.event_name == 'pull_request'
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build.yml
          workflow_conclusion: success
          branch: main
          name: base-coverage
          path: base-coverage/

      - name: Output base coverage results
        id: output_base_coverage
        if: github.event_name == 'pull_request'
        run: |
          FILE=base-coverage/.last_run.json
          if [ ! -f "$FILE" ]
          then
            echo "No base coverage for comparison. Exiting."
            exit 0
          fi

          file_text=$(cat "$FILE")
          if [ ! -z "$file_text" ]
          then
            file_text="${file_text//$'\n'/%0A}"
            echo "::set-output name=base_coverage_data::$file_text"
          fi

      - name: Output PR coverage results
        id: output_pr_coverage
        if: github.event_name == 'pull_request'
        run: |
          FILE=coverage/.last_run.json
          if [ ! -f "$FILE" ]
          then
            echo "No PR coverage for comparison. Exiting."
            exit 0
          fi

          file_text=$(cat "$FILE")
          if [ ! -z "$file_text" ]
          then
            file_text="${file_text//$'\n'/%0A}"
            echo "::set-output name=pr_coverage_data::$file_text"
          fi

      - name: Compare coverage results
        uses: actions/github-script@0.5.0
        if: github.event_name == 'pull_request'
        env:
          BASE_COVERAGE_DATA: ${{ steps.output_base_coverage.outputs.base_coverage_data }}
          PR_COVERAGE_DATA: ${{ steps.output_pr_coverage.outputs.pr_coverage_data }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('/home/runner/work/apply-for-teacher-training/apply-for-teacher-training/.github/scripts/compare_coverage.js')
            script({github, context})

      - name: Delete test matrix coverage artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            unit_shared-coverage
            unit_candidate-provider-coverage
            unit_support-referee-api-coverage
            integration_shared-coverage
            integration_provider-coverage
            integration_candidate-coverage

  trigger-deployment:
    name: Trigger Deployment
    needs: [build, lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Deployment
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          workflow: Deploy
          token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          inputs: '{"qa": "true", "staging": "true", "research": "true", "production": "true", "sandbox": "true", "sha": "${{ needs.build.outputs.IMAGE_TAG }}"}'

      - name: Wait for review app deployment
        id: wait_for_review_app_deployment
        if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy')
        uses: fountainhead/action-wait-for-check@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          checkName: review-${{ github.event.pull_request.number }} Deployment
          timeoutSeconds:  1800
          intervalSeconds: 10

      - name: Exit if review app deployment failed
        if: ${{ steps.wait_for_review_app_deployment.outputs.conclusion != '' && steps.wait_for_review_app_deployment.outputs.conclusion != 'success' }}
        run: exit 1
