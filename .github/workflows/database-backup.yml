name: Backup Database to Azure Storage

on:
  workflow_dispatch:
    inputs:
    overwriteThisMorningsBackup:
      required: true
      type: boolean
      default: false
  schedule: # 01:00 UTC
    - cron: '0 1 * * *'

jobs:
  backup:
    name: Backup PaaS Database (production)
    if: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.overwriteThisMorningsBackup == 'true') }}
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set KV environment variables
      run: |
        tf_vars_file=terraform/paas/workspace_variables/production.tfvars.json
        echo "key_vault_name=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
        echo "key_vault_infra_secret_name=$(jq -r '.key_vault_infra_secret_name' ${tf_vars_file})" >> $GITHUB_ENV
        echo "paas_space_name=$(jq -r '.paas_cf_space' ${tf_vars_file})" >> $GITHUB_ENV

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: DFE-Digital/keyvault-yaml-secret@v1
      id: get-secrets
      with:
        keyvault: ${{ env.key_vault_name }}
        secret: ${{ env.key_vault_infra_secret_name }}
        key: CF_USER,CF_PASSWORD

    - name: Setup cf cli
      uses: DFE-Digital/github-actions/setup-cf-cli@master
      with:
        CF_USERNAME:   ${{ steps.get-secrets.outputs.CF_USER }}
        CF_PASSWORD:   ${{ steps.get-secrets.outputs.CF_PASSWORD }}
        CF_SPACE_NAME: ${{ env.paas_space_name }}
        INSTALL_CONDUIT: true

    - name: Setup postgres client
      uses: DFE-Digital/github-actions/install-postgres-client@master

    - name: Set environment variable
      run: echo "BACKUP_FILE_NAME=apply_prod_$(date +"%F")" >> $GITHUB_ENV

    - name: Backup Prod DB
      run: |
        cf conduit apply-postgres-prod -- pg_dump -E utf8 --compress=1 --clean --if-exists --no-owner --verbose --no-password -f ${BACKUP_FILE_NAME}.sql.gz

    - name: Set Connection String
      run: |
        STORAGE_CONN_STR="$(az keyvault secret show --name APPLY-BACKUP-STORAGE-CONNECTION-STRING --vault-name ${{ env.key_vault_name }} | jq -r .value)"
        echo "::add-mask::$STORAGE_CONN_STR"
        echo "AZURE_STORAGE_CONNECTION_STRING=$STORAGE_CONN_STR" >> $GITHUB_ENV

    - name: Upload Backup to Azure Storage
      run: |
        az config set extension.use_dynamic_install=yes_without_prompt
        az config set core.only_show_errors=true
        az storage azcopy blob upload --container prod-db-backup \
        --source ${BACKUP_FILE_NAME}.sql.gz

    - name: Notify Slack channel on job failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_USERNAME: CI Deployment
        SLACK_TITLE: Database backup failure
        SLACK_MESSAGE: Production database backup job failed
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_COLOR: failure
        SLACK_FOOTER: Sent from backup job in database-backup workflow
