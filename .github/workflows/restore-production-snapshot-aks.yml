name: Restore AKS Snapshot Database
#Restores Snapshot Database apply-postgres-snapshot instance from nightly backup

on:
  workflow_dispatch:
    inputs:
      date-to-restore-from:
        description: The date of the backup to use in the restore in yyyy-MM-dd format
        required: true
      environment:
        description: GitHub environment to run the restore in
        type: choice
        default: qa
        options:
          - qa
          - production

jobs:
  backup:
    name: Restore Snapshot Database (${{ github.event.inputs.environment }})
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}_aks
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set KV environment variables
        run: |
          tf_vars_file=terraform/aks/workspace_variables/${{ github.event.inputs.environment }}_aks.tfvars.json
          tf_backend_vars_file=terraform/aks/workspace_variables/${{ github.event.inputs.environment }}_aks_backend.tfvars

          echo "APP_NAME=apply-$(jq -r '.paas_app_environment' ${tf_vars_file})" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT_RG=$(awk '/resource_group_name/ {print $3}' ${tf_backend_vars_file} | tr -d '"')" >> $GITHUB_ENV
          . ./global_config/${{ github.event.inputs.environment }}_aks.sh
          SERVICE_SHORT=att
          echo "STORAGE_ACCOUNT_NAME=${RESOURCE_NAME_PREFIX}${SERVICE_SHORT}dbbkp${CONFIG_SHORT}sa" >> $GITHUB_ENV

          echo "BACKUP_ARCHIVE_NAME=apply_${{ github.event.inputs.environment }}_$(date +"%F").sql.gz" >> $GITHUB_ENV
          echo "KEY_VAULT_NAME=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
          echo "DB_NAME=apply-postgres-${{ github.event.inputs.environment }}-snapshot" >> $GITHUB_ENV

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup postgres client
        uses: DFE-Digital/github-actions/install-postgres-client@master

      - name: Validate date-to-restore-from input
        run: if [[ ${{ github.event.inputs.date-to-restore-from }} =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then echo "BACKUP_DATE=${BASH_REMATCH[0]}" >> $GITHUB_ENV; else exit 1; fi

      - name: Set Azure prefix and backup container name
        run: |
          echo "BACKUP_CONTAINER=database-backup" >> $GITHUB_ENV

      - name: Set Connection String and Mask Storage Access Key
        run: |
          STORAGE_CONN_STR=$(az storage account show-connection-string -g  $STORAGE_ACCOUNT_RG -n $STORAGE_ACCOUNT_NAME --query 'connectionString')
          echo "::add-mask::$STORAGE_CONN_STR"
          echo "AZURE_STORAGE_CONNECTION_STRING=$STORAGE_CONN_STR" >> $GITHUB_ENV
          STORAGE_ACCESS_KEY=$(az storage account keys list -g $STORAGE_ACCOUNT_RG -n $STORAGE_ACCOUNT_NAME --query [0].value -o tsv)
          echo "::add-mask::$STORAGE_ACCESS_KEY"

      - name: Download backup
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az config set core.only_show_errors=true
          az storage azcopy blob download --container ${BACKUP_CONTAINER} --source ${BACKUP_ARCHIVE_NAME} --destination ${BACKUP_ARCHIVE_NAME}

      - uses: DFE-Digital/github-actions/set-kubelogin-environment@master
        with:
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: K8 setup
        shell: bash
        run: |
          make ci ${ENVIRONMENT}_aks get-cluster-credentials
          make install-konduit
        env:
          ENVIRONMENT=${{ github.event.inputs.environment }}

      - name: Restore backup to AKS snapshot database
        shell: bash
        run: |
          bin/konduit.sh -d ${DB_NAME} -k ${KEY_VAULT_NAME} -i ${BACKUP_ARCHIVE_NAME} -c -t 7200 ${APP_NAME}  -- psql
